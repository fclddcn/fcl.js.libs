后缀表示法  
在后缀表示法中，操作符位于操作数后面。后缀表示法也称逆波兰表示法（reverse   Polish   notation，RPN），因其使表达式求值变得轻松，所以被普遍使用。  
 
 
Syntax     :   operand1   operand2   operator  
Example   :   AB+C*DEF+/-  
 
	 
 
前缀和后缀表示法有三项公共特征：  
 
操作数的顺序与等价的中缀表达式中操作数的顺序一致  
不需要括号  
操作符的优先级不相关  
中缀表达式到后缀表达式的转换  
要把表达式从中缀表达式的形式转换成用后缀表示法表示的等价表达式，必须了解操作符的优先级和结合性。优先级或者说操作符的强度决定求值顺序；优先级高的操作符比优先级低的操作符先求值。   如果所有操作符优先级一样，那么求值顺序就取决于它们的结合性。操作符的结合性定义了相同优先级操作符组合的顺序（从右至左或从左至右）。    
 
 
Left   associativity     :   A+B+C   =   (A+B)+C  
Right   associativity   :   A^B^C   =   A^(B^C)  
 
---------------
转换过程
---------------
用下面的算法读入中缀表达式的操作数、操作符和括号：  
 
初始化一个临时栈，一个结果栈。  

从左到右读入中缀表达式，每次一个标记。  
 
如果字符是操作数，将它压入结果栈。  
 
如果字符是个操作符，从临时栈弹出（pop）操作符，直至遇见开括号（opening   parenthesis）、
优先级较低的操作符或者同一优先级的右结合符号。把这个操作符压入（push）临时堆栈。  
 
如果字符是个开括号，把它压入临时堆栈。  
 
如果字符是个闭括号（closing parenthesis），在遇见开括号前，弹出所有操作符，然后把它们添加到结果栈。  
 
如果到达表达式的末尾，弹出所有操作符并压入结果栈。  

---------------
后缀表达式求值  
---------------

对后缀表达式求值比直接对中缀表达式求值简单。在后缀表达式中，不需要括号，而且操作符的优先级也不再起作用了。您可以用如下算法对后缀表达式求值：  
 
初始化一个空堆栈  
 
 
从左到右读入后缀表达式  
 
 
如果字符是一个操作数，把它压入堆栈。  
 
 
如果字符是个操作符，弹出两个操作数，执行恰当操作，然后把结果压入堆栈。如果您不能够弹出两个操作数，后缀表达式的语法就不正确。  
 
 
到后缀表达式末尾，从堆栈中弹出结果。若后缀表达式格式正确，那么堆栈应该为空。  
 
祥见：http://www-900.ibm.com/developerWorks/cn/java/j-w3eva/index.shtml


(+-*/)