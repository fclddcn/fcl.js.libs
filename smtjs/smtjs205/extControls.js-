ExtControls={};
ExtControls.picUploader=function(el){
		var self=this;
		this.el=el;
		$("<input type='button' value='upload'/>").insertBefore(el).click(function(){
				self.showUploadDialog(el);
		});
}
ExtControls.picUploader.prototype.getValueArray=function(el){
		var ar=[];
		var r=/\d+/;
		var m;
		while(m=r.exec(el.value)){
				ar.push(m[0])
		};
		return ar;
}
ExtControls.picUploader.prototype.showUploadDialog=function(el){
		$el=$(this.el);
		var urlDlg=$el.attr("urlDlg");
		var urlPost=$el.attr("urlPost");
		var urlWatch=$el.attr("urlWatch");
		$dlg=null;
		$.post(urlDlg,null,function(r){
				$dlg=$(r).appendTo(document.body);
				$dlg.find("input[value=close]").click(function(){
						$dlg.remove();
				});

				$dlg.find("input[value=upload]").click(function(){
						self.upload();
				});

		});
}
ExtControls.picUploader.prototype.upload=function(el){
		
}


//---PicSlider---
ExtControls.PicSlider=function(el){
	var div1=$(el);
	var arImg=div1.attr("slidePics").split(",");
	var imgTag="<img style='background:#ffeecc;float:left;width:{$1};height:{$2}' src='pic_upload/{$0}'></img>";
	var width=div1.css('width');
	var height=div1.css('height');
	var timer=null;
	var divImg=$("<div style='width:100%;height:100%'/>");
	div1.append(divImg);
	var divBtns=$("<div style='position:absolute;margin-top:-20px;width:{$0};\
								background:#ffccdd;text-align:right;line-height:20px'></div>".fill(width));
	var arBtn=[];
	div1.append(divBtns);
	arImg.each(
		function(v,i){
			var btnNew=$("<div style='float:right;width:30px;background:#000;color:#fff;\
									 border-left:1px solid #fff;text-align:center;cursor:pointer;'>{$0}</div>".fill(i+1));
			divBtns.append(btnNew);
			arBtn[i]=(btnNew);
			btnNew.hover(
				function(){
					clearTimeout(timer);
					showImg(i);
				},
				function(){
					timer=setTimeout(showNext,3000);
				});
		},-1);
	var curr=-1;
	var img=null,btn=null;
	function showImg(id){
		curr=id;
		if(img)img.remove();
		if(btn)btn.css("background","#000");
		btn=arBtn[curr];
		btn.css("background","#f00");
		var src=arImg[curr];
		img=$(imgTag.fill(src,width,height));
		divImg.append(img);
	}
	function showNext(){
		if(++curr>arImg.length-1)curr=0;
		showImg(curr);
		timer=setTimeout(showNext,3000);
	}
	showNext();
};
ExtControls.PicSlider.prototype.init=function(){
};
//---Marquee---
ExtControls.Marquee=function(el){
	var m=el;
	var s=m.innerHTML;
	m.innerHTML+=s;
	var arImg=el.getElementsByTagName("img");
	if(arImg.length<1)return; //无图片不滚动
	while(m.scrollWidth*0.5<m.offsetWidth){
		m.innerHTML+=s;
	}
	var funcScroll=function(){
		m.scrollLeft+=1;
		if(m.scrollLeft>=m.scrollWidth*0.5){
			m.scrollLeft=0;
		}
	};
	var itv=setInterval(funcScroll,50);
	m.onmouseover=function(){
		clearInterval(itv);
	};
	m.onmouseout=function(){
		itv=setInterval(funcScroll,50);
	};
};
//---suggest---
ExtControls.Suggest=function(el){
		$(el).jSuggest({
				type: "GET",
				data: "searchQuery",
				autoChange: true
		});
};
//---LoginDlg---
ExtControls.LoginDlg=function(el){
		var self=this;
		el.onclick=function(){
				self.show();
		};
};
ExtControls.LoginDlg.prototype.show=function(){
		$dlg=$(".login-dlg");
		if($dlg.length){
				$("#login-info").html("");
				$dlg.show();
				return;
		}
		$.post("?nav=cclient.login.dlg",function(r){
				$(document.body).append(r);
				$("input[value=提交]").click(function(){
						var username=$("input[name=username]").val();
						var password=$("input[name=password]").val();
						$("#login-info").html("登录中,请稍候...");
						$.post("?nav=client.login.post",{password:password,username:username},function(r){
								if(r=="true"){
										$(".login-dlg").hide();
								}else{
										$("#login-info").html(r);
								}
						});
				});
				$("input[value=取消]").click(function(){
						$(".login-dlg").hide();
				});
		});
};
//---Spin---
ExtControls.Spin=function(el){
		this.constructor.extend(this,Element,[el]);
		this.init();
};
ExtControls.Spin.prototype.check=function(){
		var v=this.get("value");
		if(!v)v=0;
		this.set("value",isNaN(v)?0:v);
};
ExtControls.Spin.prototype.init=function(){
		var self=this;
		var input=this.getPackIn();
		var nStep=parseFloat(this.getAttribute("spinStep"));
		if(isNaN(nStep))nStep=1;
		//确保值为数字
		this.check();
		//
		var a=window.ce("a",this.getParentNode(),this.get("nextSibling"),"");
		a.innerHTML="[+]";
		a.href="#";
		a.onclick=function(){
				self.check();
				var v=parseFloat(input.value);
				v=v.fadd(nStep);
				input.value=v;
				return false;
		};
		//
		var b=window.ce("a",this.getParentNode(),this.get("nextSibling"),"");
		b.innerHTML="[-]";
		b.href="#";
		b.onclick=function(){
				self.check();
				var v=parseFloat(input.value);
				v=v.fsub(nStep);
				input.value=v;
				return false;
		};
};
//---Calendar---
ExtControls.Calendar=function(el){
		this.constructor.extend(this,Element,[el]);
		el.readOnly=true;
		var self=this;
		this.mm=null; this.yy=null;
		this.init();
		this.showDate(new Date().getFullYear(),new Date().getMonth(),new Date().getDate());
		this.now=new Date().format("yyyy-MM-dd");
		el.onclick=function(){
				self.input(this);
		};
};
ExtControls.Calendar.prototype.init=function(){
		var self=this;
		var theDoc=document;
		this.layer=$ce("div",theDoc.body,theDoc.body.childNodes[0],"border:1px solid \
	  #a00;height:210px;width:170px;left:0px;top:0px;px;background:#fff;color:#000;font-size:12px;\
		font-family:arial;z-index:999;display:none");
		///////////////////////////
		this.bar=$ce("div",this.layer,null,"background:#a00;color:#fff;font-weight:normal;\
		height:20px;line-height:20px;cursor:move;padding:0 5px");
		this.bar.set("innerHTML","<span style='float:left'>日历</span>");
		///////////////////////////
		var close=$ce("div",this.bar,null,"cursor:pointer;float:right;border:0px solid #000;line-height:19px;\
     height:19px;*height:15px;*line-height:15px;vertical-align:top");
		close.set("innerHTML","[X]");
		close.set("onclick",function(){
				self.asDialog.close();
		});
		///////////////////////////
		this.topBar=$ce("table",this.layer,null,"border:0px solid #000;border-collapse: collapse ;\
	      ;width:100%;height:20px;margin:0px");
		var tbody=$ce("tbody",this.topBar);
		var tr=$ce("tr",tbody);
		var td1=$ce("th",tr,null,"cursor:pointer;width:20px");
		td1.set("onclick",function(){
				self.monthAdd(-1);
		});
		td1.set("innerHTML","&lt;");
		var td2=$ce("th",tr,null,";border:none;padding:0;");
		td2.set("innerHTML","");
		var td3=$ce("th",tr,null,";border:none");
		var td4=$ce("th",tr,null,"cursor:pointer;width:20px");
		td4.set("innerHTML","&gt;");
		td4.set("onclick",function(){
				self.monthAdd(1);
		});
		//////////////////////////////
		this.lstYear=$ce("select",td2,null,"width:100%;vertical-align:top;width:65px;height:20px;margin:0;padding:0");
		this.lstMonth=$ce("select",td3,null,"width:100%;vertical-align:bottom;width:65px;height:20px;margin:0;padding:0");
		//////////////////////////////
		var ulWeek=$ce("div",this.layer,null,"line-height:20px;margin-left:1px;");
		var arWeek=["日","一","二","三","四","五","六"];
		arWeek.each(function(v){
				var li=$ce("div",ulWeek,null,"width:23px;margin:1px 1px 0  0;height:22px;text-align:center;border:0px solid\
	           #000;font-size:12px;clear:none;float:left;font-size:12px;cursor:default;");
				li.set("innerHTML",v);
		});
		/////////////////////////////////
		this.cells=[];
		var ulCell=$ce("div",this.layer,null,"line-height:23px;margin-left:1px;");
		new Array().fillRange(0,38).each(function(v){
				var li=$ce("div",ulCell);
				li.set("innerHTML",v);
				li.newCss("background:#ccc;margin:1px 1px 0 0;width:23px;\
		 height:23px;text-align:center;border:0px solid\
		#000;font-size:12px;clear:none;float:left;font-size:12px;cursor:pointer;");
				self.cells.push(li);
		})    ;
		var li=$ce("div",ulCell,null,"background:#ccc;margin:1px 1px 0 0;width:23px;height:23px;text-align:center;border:0px solid\
	       #000;font-size:12px;clear:none;float:left;font-size:12px;cursor:pointer;width:71px");
		li.set("innerHTML","今天");
		li.set("onclick",function(){
				self.done(new Date());
		});
		if($(this.getPackIn()).attr("caleShowTime")=="true"){
				this.initTime();
		}
		this.asDialog=new Dialog(this.layer.getPackIn(),this.bar.getPackIn());
};
ExtControls.Calendar.prototype.initTime=function(){
		var self=this;
		var divMainLayer=this.layer.getPackIn();
		$(divMainLayer).css("height","230px");
		var layer=$("<div style='clear:all;text-align:center;'/>").appendTo(divMainLayer);
		this.lstHour=$("<select/>").appendTo(layer);
		new Array().fillRange(1,12).each(function(v){
				self.lstHour.append("<option value='{$0}'>{$0}</option>".fill(v));
		});
		layer.append("时");
		this.lstMin=$("<select/>").appendTo(layer);
		new Array().fillRange(0,59).each(function(v){
				if(v<10)v="0"+v;
				self.lstMin.append("<option value='{$0}'>{$0}</option>".fill(v));
		});
		layer.append("分");
};
ExtControls.Calendar.prototype.showDate=function(y,m){
		var self=this;
		var firstday = new Date(y,m,1).getDay();  //当月第一天的星期几
		this.lstYear.set("onchange",null);
		this.lstMonth.set("onchange",null);
		new Array().fillRange(0,38).each(function(v){
				var d=new Date(y,m,v-firstday+1);
				self.cells[v].set("innerHTML",d.getDate());
				self.cells[v].get("style").color=(d.getMonth()!=m)?"#999":"#000";
				if(d.format("yyyy-MM-dd")==self.now){
						self.cells[v].get("style").background="#0ff";
				}else{
						self.cells[v].css("background:#ccc");
				}
				self.cells[v].set("onclick",function(){
						self.done(d);
				});
		});
		//填充年和月的下拉列表
		if(y!=self.yy){ //重建年列表,如果选择了另一年
				this.lstYear.set("innerHTML","");
				new Array().fillRange(y-5,y+5).each(function(v){
						var op=$ce("option",self.lstYear);
						op.set("innerHTML",v);
						op.set("value",v);
						if(v==y)op.set("selected",true);
				});		
		}
		if(!self.mm){ //月列表只建一次
				this.lstMonth.set("innerHTML","");
				new Array().fillRange(1,12).each(function(v){
						var op=$ce("option",self.lstMonth);
						op.set("innerHTML",v);
						op.set("value",v);
						if(v==m+1)op.set("selected",true);
				});
		}
		//给下拉列表赋值
		this.lstMonth.set("value",m+1);
		this.lstYear.set("value",y);
		//记住显示的年份
		this.mm=m; this.yy=y;
		//事件,年和月的下拉列表
		this.lstYear.set("onchange",function(){
				self.showDate(parseInt(this.value),self.mm);
		});
		this.lstMonth.set("onchange",function(){
				self.showDate(self.yy,parseInt(this.value)-1);
		});
};
ExtControls.Calendar.prototype.monthAdd=function(n){
		var d=new Date(this.yy,this.mm+n);
		this.showDate(d.getFullYear(),d.getMonth());
};
ExtControls.Calendar.prototype.input=function(el){
	  var style=this.layer.get("style");
    if(el.value.isDate('ymd')){
        var ar=el.value.split("-");     
        this.yy=parseInt(ar[0]);
        this.mm=parseInt(ar[1])-1;
        this.now=el.value;
    }
	  el=new Element(el);
	  this.el=el;
	  this.layer.css("left:{$0}px;top:{$1}px".fill(el.getOffsetLeft(),el.getOffsetTop()+el.get("offsetHeight")));
	  this.showDate(this.yy,this.mm);
	  this.asDialog.show({cover:1});
}
ExtControls.Calendar.prototype.done=function(value){
		if(this.lstHour){
				var h=this.lstHour.val();
				var m=this.lstMin.val();
				this.el.set("value",value.format("yyyy-MM-dd {$0}:{$1}".fill(h,m)));
		}else{
				this.el.set("value",value.format("yyyy-MM-dd".fill(h,m)));
		}
		var onchange=this.getPackIn().onchange;
		if(onchange)onchange();
		if(this.el.onchange)this.el.onchange();
		this.asDialog.close();
}
//---PicList---
ExtControls.PicList=function(el){
	var self=this;
	this.constructor.extend(this,Element,[el]);
	var elParent=this.getParentNode();
	var nPicCount=parseInt(this.getAttribute("picCount"));
	if($(el).attr('editable')!="false"){
		var aAdd=ce("a",elParent,null,"border:1px");
		new Element(aAdd).setHash({innerHTML:"添加<br/>",href:"#"});
		aAdd.onclick=function(){
			self.showSelector();
			return false;
		};
	}
	this.div=ce("div",elParent,null,"border:1px;width:100%;margin-left:0;white-space:normal");
	var v=el.value;
	el.value="";
	this.valueAdd(v);
};
ExtControls.PicList.prototype.valueAdd=function(ids){
		var el=this.getPackIn();
		if(el.value)el.value+=",";
		el.value+=ids;
		var sPath=this.getAttribute("picPath");
		var sStyle=this.getAttribute("picStyle");
		var nPadding=parseInt(this.getAttribute("picPadding"));
		var div=this.div;
		$.post('?nav=admin.picture.idsToFiles',{ids:ids},function(r){
				var arList=r.split(",");
				arList.each(function(v,i){
						if(v=="")return;
						var img=ce("img",div);
						img.src=sPath+v;
						if(sStyle)new Element(img).newCss(sStyle+";cursor:pointer;");
						img.ondblclick=function(){
								var idx=$(this).parent().find("img").index(this);
								var ar=el.value.split(",");
								ar.splice(idx,1);
								el.value=ar.join(",");
								this.parentNode.removeChild(this);
						};
				});
		});
};
ExtControls.PicList.prototype.showSelector=function(){
		var self=this;
		var el=this.getPackIn();
		var onBeforeSelect=$(el).attr("onBeforeSelect");
		if(onBeforeSelect){
				new Function(onBeforeSelect).apply(el);
		}
		var sPicType=$(el).attr('picType')
		var sUrl=$(el).attr("picUrl")+"&picTypeCode="+sPicType;
		load(1);
		function ieShowSelect(b){
				if(document.all)$('select').css('visibility',b?'visible':'hidden');
		} 
		ieShowSelect(false);
		function load(nPage){
				sUrl+="&page="+nPage;
				$.post(sUrl,null,function(r){
						$("#divPicList").remove();
						$(document.body).append(r);
						$("#divPicList").find("input[value=取消]").click(
								function(){
										ieShowSelect(true);
										$("#divPicList").hide();
								}
						);
						$("#divPicList").find("input[value=确定]").click(
								function(){
										ieShowSelect(true);
										var ar=[];
										var s=$("#divPicList").find("input[type=checkbox][checked]").each(function(){
												ar.push(this.value);
										});
										$("#divPicList").hide();
										$('select').css('visibility','visible');
										self.valueAdd(ar.join());
								}
						);
						//翻页,重新加载
						$("#divPicList").find("tfoot a").click(
								function(){
										load($(this).attr('page'));
										return false;
								}
						);
				});
		}
}
//---PowerTable---
ExtControls.PowerTable=function(el){
		this.el=el;
		this.init();
}
/*添加隐藏字段,如bAppend为否,则为替换,即清除已有的*/
ExtControls.PowerTable.prototype.addHidden=function(name,value,bAppend){
		var $form=$(this.el).parents('form');
		if(!bAppend)$form.find("input[name={$0}]".fill(name)).remove();;
		$form.append("<input type='hidden' name='{$0}' value='{$1}'/>".fill(name,value));
}
ExtControls.PowerTable.prototype.init=function(){
		var el=this.el;
		var self=this;
		var focLine=null;
		new Array().fillArray($(el).find(".listrow")).each(function(tr,i){
				tr.style.cursor="pointer";
				tr.oldBgColor=tr.style.background;
				tr.onclick=function(){
						if(focLine)focLine.style.background=focLine.oldBgColor;
						this.style.background="#fdd";
						focLine=this;
				};
		});
		var $form=$(el).parents('form');
		//搜索表单提交
		$(el).find("input[type=submit]").each(function(){
				this.onclick=function(){
						$(".searchform").each(function(){
								$(this).find("input,select,textarea").each(function(){
										if($(this).val()==''){
												$(this).attr('disabled','true');
										}
								});
						});
				};
		});
		//添加按钮
		$(el).find(".addBtn").each(function(){
				this.onclick=function(){
						$(".searchform").remove();
						self.addHidden('nav',$(this).attr('postnav'));
						$form.attr('action',$(this).attr('action'));
						$form.submit();
				};
		});
		//编辑按钮
		$(el).find(".editBtn").each(function(){
				this.onclick=function(){
						if(!focLine){
								return alert('请选择要修改的行');
						}
						var id=$(focLine).find("input[type=checkbox]").val();
						$(".searchform").remove();
						self.addHidden('nav',$(this).attr('postnav'));
						self.addHidden('id',id);
						$form.submit();
				};
		});
		//删除按钮
		$(el).find(".delBtn").each(function(){
				this.onclick=function(){
						var n=$(el).find("input[type=checkbox][checked]").length;
						if(focLine&&n<1){
								if(!confirm("真的要删除这1行?"))return;
								$(focLine).find("input[type=checkbox]").attr("checked",true);
						}else if(n>0){
								if(!confirm("真的要删除这{$0}行?".fill(n)))return;
						}else{
								return alert('请选择要删除的行,高亮一行(单选)\n或在行首以复选框选中要删除的行(可多选)');
						}
						$(".searchform").remove();
						self.addHidden('nav',$(this).attr('postnav'));
						$form.submit();
				};
		});
		//置顶
		$(el).find(".putupBtn").each(function(){
				this.onclick=function(){
						var n=$(el).find("input[type=checkbox][checked]").length;
						if(focLine&&n<1){
								if(!confirm("真的要置顶这1行?"))return;
								$(focLine).find("input[type=checkbox]").attr("checked",true);
						}else if(n>0){
								if(!confirm("真的要置顶这{$0}行?".fill(n)))return;
						}else{
								return alert('请选择要置顶的行,高亮一行(单选)\n或在行首以复选框选中要置顶的行(可多选)');
						}
						$(".searchform").remove();
						self.addHidden('nav',$(this).attr('postnav'));
						$form.submit();
				};
		});
		//查询表单
		var $searchform=$(".searchform");
		var bShow=false;
		$searchform.find("thead").dblclick(function(){
				var s=bShow?'none':'';
				bShow=!bShow;
				$searchform.find(".hide").css('display',s);
		});
		//置顶
		$(el).find(".putupBtn").each(function(){
				this.onclick=function(){
						var n=$(el).find("input[type=checkbox][checked]").length;
						if(focLine&&n<1){
								if(!confirm("真的要置顶这1行?"))return;
								$(focLine).find("input[type=checkbox]").attr("checked",true);
						}else if(n>0){
								if(!confirm("真的要置顶这{$0}行?".fill(n)))return;
						}else{
								return alert('请选择要置顶的行,高亮一行(单选)\n或在行首以复选框选中要置顶的行(可多选)');
						}
						$(".searchform").remove();
						self.addHidden('nav',$(this).attr('postnav'));
						$form.submit();
				};
		});
		//置顶
		$(el).find(".singleSelBtn").each(function(){
				this.onclick=function(){
						if(!focLine){
								alert('请高亮一行(单选)')
						}else{
								var v=$(focLine).find("input[type=checkbox]").val();
								selCallback=$(this).attr('selCallback')
								if(window.opener){
										fn=eval("(function (value){$0})".fill(selCallback))
										fn.apply(this,[v])
								}
								window.close()
						}
				}
		})
}
//---myctrl---
function myctrl(b){
		this.box=b;
		this.create();
}
myctrl.prototype.create=function(){
		this.ctrl=this.box.getAttribute("type");
		if(!this.ctrl){ //flat文字控件
				return;
		}
		//初始
		if(this["init_"+this.ctrl]){
				this["init_"+this.ctrl]();
		}else{
				return
		}
		this.box.ctrl=this.ctrl;
}
myctrl.prototype.init_label=function(){
		this.ctrl=document.createElement("span");
		this.box.parentNode.insertBefore(this.ctrl,this.box) 
		this.ctrl.value=this.box.value;
		this.ctrl.style.width=this.box.getAttribute("width");
		this.ctrl.id=this.box.getAttribute("ctrlid");
}
myctrl.prototype.init_radios=function(){
		this.ctrl=document.createElement("span");
		this.ctrl.value="";
		this.box.parentNode.insertBefore(this.ctrl,this.box) 
		var self=this;
		var items;
		eval("items="+this.box.getAttribute("items"));
		for(var obj in items){
				var radio=document.createElement("<input type=radio name="+this.ctrl+" value="+items[obj]+">");
				radio.type="radio";
				radio.onclick=function(){
						self.ctrl.value=this.value;
				}
				var txt=document.createElement("span");
				txt.innerHTML=obj;
				this.ctrl.appendChild(txt);
				this.ctrl.appendChild(radio);
				if(this.box.value==items[obj]){
						radio.checked=true;
				}
		}
		this.ctrl.parentNode.removeChild(this.box)
}
myctrl.prototype.init_checks=function(){
		this.ctrl=document.createElement("div");
		this.box.parentNode.insertBefore(this.ctrl,this.box) 
		var items;
		eval("items="+this.box.getAttribute("items"));
		for(var obj in items){
				var chk=document.createElement("input");
				chk.type="checkbox";
				var txt=document.createElement("span")
				txt.innerHTML=obj;
				this.ctrl.appendChild(txt);
				this.ctrl.appendChild(chk);
				chk.name=this.ctrl;
				chk.value=items[obj];
				if(this.box.value){
						if(this.box.value.indexOf(items[obj])>-1){
								chk.checked=true;
						}}
		}
		this.ctrl.parentNode.removeChild(this.box)
}
myctrl.prototype.init_input=function(){
		var type=this.box.getAttribute("type");
		this.ctrl=document.createElement(this.ctrl);
		this.ctrl.name=this.ctrl;
		try{
				if(type)this.ctrl.type=type;
		}catch(e){
				alert(e.description)
		}
		this.box.parentNode.insertBefore(this.ctrl,this.box) 
		this.ctrl.value=this.box.value;
		this.ctrl.style.width=this.box.getAttribute("width");
		this.ctrl.id=this.box.getAttribute("ctrlid");
		var self=this;
		this.ctrl.onkeyup=function(e){
				var evt=window.event||e;
				if(self.onkeyup)self.onkeyup(evt);
		}
		this.ctrl.parentNode.removeChild(this.box)
}
myctrl.prototype.init_textarea=function(){
		this.ctrl=document.createElement(this.ctrl);
		this.ctrl.name=this.ctrl;
		this.box.parentNode.insertBefore(this.ctrl,this.box) 
		this.ctrl.value=this.box.value;
		this.ctrl.style.width=this.box.getAttribute("width");
		this.ctrl.style.height=this.box.getAttribute("height");
		this.ctrl.parentNode.removeChild(this.box)
}
myctrl.prototype.init_select=function(){
		this.ctrl=document.createElement(this.ctrl);
		this.ctrl.name=this.ctrl;
		this.box.parentNode.insertBefore(this.ctrl,this.box) 	
		var options;
		eval("options="+this.box.getAttribute("options"));
		for(var obj in options){
				var option=document.createElement("option");
				option.innerHTML=obj;
				option.value=options[obj];
				if(option.value==this.box.value){
						option.selected=true;
				}
				this.ctrl.appendChild(option);
		}
		this.ctrl.parentNode.removeChild(this.box)
}
myctrl.prototype.applyStyle=function(elem,s){
		try{
				for(var stylename in s){
						elem.style[stylename]=s[stylename];
				}
		}catch(e){
				alert("Error in myctrl.applyStyle: "+[elem.tagname,s[stylename]])
		}
}
myctrl.prototype.css=function(el,sCss){
		sCss=sCss.toLowerCase()
		sCss=sCss.replace(/\r|\n/g,"") //换行
		sCss=sCss.replace(/\s*\:\s*/g,":"); //冒号两边的空格
		sCss=sCss.replace(/\s*\;\s*/g,";"); //分号两边的空格
		sCss=sCss.replace(/;{2,}/g,";"); //去掉重复的分号
		sCss=sCss.replace(/(^;)|(;$)/,"") //去首尾的分号
		var ar=sCss.split(";")
		for(var i=0,s=ar[0];i<ar.length;s=ar[++i]){
				if(arMatch=/^([a-z\-]+)\:(.+)$/.exec(s)){
						//trace([arMatch[1],"  ",arMatch[2]])
						arMatch[1]=arMatch[1].replace(/-([a-zA-Z])/g,function(a,b){ //foo-bar形式变成fooBar形式
								return b.toUpperCase()}
																				 )
						el.style[arMatch[1]]=arMatch[2]
				}
		}
}
///////////////////////////////////////////////////////////////////
// exselect 是将文本框变成下自定义的下拉列表, 特点是可选也可输入
//////////////////////////////////////////////////////////////////
myctrl.prototype.init_exselect=function(){
		var self=this;
		var isIe=window.getBrowserType()=="ie"
		//当前文本框宽度,要生成等宽列表
		var width=parseInt(this.box.offsetWidth);
		if(isNaN(width)||width<100)width=100
		width=width-2
		//容器(带边框), 是一个span,因为生成的控件应为 inline 对象
		var artbox=document.createElement("div");
		this.css(artbox,"height:18px;background:#fff;line-height:18px;text-align:left;\
		vertical-align:top;display:inline;zoom:1;width:{$0}px;\
		padding:0px;border:1px solid #aaa;white-space:nowrap".fill(width)
						)
		if(!isIe){
				this.css(artbox,"display:inline-block")
		}
		//插入文档
		this.box.parentNode.insertBefore(artbox,this.box) 
		var ctrlValue=this.box.value
		//克隆原文本框(无边框), 放到容器中
		var elInput=this.box.cloneNode(true);
		elInput.type="text";
		elInput.name=""
		artbox.appendChild(elInput);
		this.css(elInput,"width:{$0}px;height:15px;border:0;background:#fff;\
	vertical-align:top;margin:0px".fill(width-21))
		if(!isIe){
				this.css(elInput,"width:{$0}px".fill(width-18))
		}
		//~ //添加下拉按钮
		var btn=document.createElement("div");
		artbox.appendChild(btn);
		this.css(btn,	"display:block;margin-top:1px;padding-top:5px;position:absolute;border:0px solid #fff;\
	background:#fff;width:18px;text-align:center;height:12px;vertical-align:middle")
		if(!isIe){
				this.css(btn,"margin-left:{$0}px;margin-top:-19px;padding-top:6px".fill(width-19))
		}
		btn.onclick=function(){//防止点击按钮时提交表单 (firefox)
				return false; 
		}	
		//~ //下拉列表
		var divDroplist=document.createElement(isIe?"div":"select")
		artbox.appendChild(divDroplist); 
		this.css(divDroplist,"position:absolute;background-color:#eee;z-index:100;display:none;\
    width:{$0}px;margin-top:0px;margin-left:-1px;border:1px solid #000".fill(width-2));
		this.css(divDroplist,"margin-left:{$0}px;margin-top:20px".fill(-width+18))
		//新建一个hidden
		var elHide=document.createElement("input")
		elHide.type="hidden"
		elHide.name=this.box.name
		elHide.value=elInput.value
		//文本框输入事件
		var _disabled=this.box.getAttribute("locked")?true:false;
		elInput.onkeydown=function(e){
				var evt=window.event||e;
				evt.returnValue=!_disabled;
		}
		elInput.onkeyup=function(e){
				var evt=window.event||e;
				if(!_disabled){
						elHide.value=this.value;
				}
				if(self.onkeyup)self.onkeyup(evt);
		}
		elInput.onchange=function(){
				elHide.value=this.value;
		}
		//设为只读
		var sLocked=this.box.getAttribute("locked")
		var bLocked=sLocked&&sLocked.toLowerCase()=="true"
		if(bLocked){
				this.applyStyle(elInput,{background:"#eee",cursor:"default"});
				if(!this.box.value)options[0].onmousedown();
		}
		//~ //下拉按钮中的下箭头
		btn.innerHTML="\
		<div style='margin:auto;font-size:0px;width:6px;height:2px;background:#00c'></div>\
		<div style='margin:auto;font-size:0px;width:4px;height:2px;background:#00c'></div>\
		<div style='margin:auto;font-size:0px;width:2px;height:2px;background:#00c'></div>";
		//添加菜单项到下拉菜单
		var hsOpts=eval("("+this.box.getAttribute("options")+")");
		var bValueAsText=this.box.getAttribute("valueastext")=="true";
		for(var k in hsOpts){
				//每个选项是一个div
				var opt=document.createElement(isIe?"div":"option");
				opt.innerHTML=bValueAsText?k:hsOpts[k];
				opt.value=k;
				this.css(opt,"cursor:default;width:100%;background:#eee;padding-Left:2px;text-Align:left");
				//每个选项的事件
				opt.onmouseover=function(){
						divDroplist.selectedIndex=this.index;
						this.style.background="#999";
				};
				opt.onmouseout=function(){
						this.style.background="transparent";
				};
				opt.onmousedown=function(){
						elInput.value=this.innerHTML;
						elHide.value=this.value;
						this.parentNode.style.display="none";
						btn.style.background="#fff";
						window.showSelects(true);
				};
				divDroplist.appendChild(opt);
				if(ctrlValue==k){
						opt.onmousedown();
				}
				if(!isIe)divDroplist.size++;
		}
		//~ //各组成部分的事件
		btn.onmousedown=function(){
				var curr=divDroplist.style.display;
				var disp=(curr=="")?"none":"";
				window.showSelects(false);
				divDroplist.style.display=disp;
				if(isIe){
						if(disp=="")divDroplist.focus();
				}else{
						this.onmouseout=function(){
								divDroplist.focus();
						};
				}
		};
		//各组成部分的事件
		btn.onmouseup=function(){
				//(isIe?artbox:divDroplist).focus()
		};
		window.addEventHandler(divDroplist,"blur",function(){ //在外部点击
				btn.style.background="#fff";
				divDroplist.style.display="none";
				window.showSelects(true);
		});
		divDroplist.onblur=function(){ //在外部点击
				btn.style.background="#fff";
				divDroplist.style.display="none";
				window.showSelects(true);
		};
		elInput.onkeydown=function(d){ //处理只读
				var evt=window.event||e;
				evt.returnValue=!bLocked;
		};
		//插入隐藏域
		artbox.appendChild(elHide);
		//移除原文本框
		this.box.parentNode.removeChild(this.box);
};
